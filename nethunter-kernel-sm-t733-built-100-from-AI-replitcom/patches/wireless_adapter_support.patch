From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: NetHunter <admin@kali.org>
Date: Sat, 27 Apr 2024 00:00:00 +0000
Subject: [PATCH] Add external wireless adapter support for NetHunter

This patch adds support for common external wireless adapters used with
Kali NetHunter for penetration testing, including RTL8812AU, RT8187,
and Atheros chipsets.

diff --git a/drivers/net/wireless/Kconfig b/drivers/net/wireless/Kconfig
index aaaaaaa..bbbbbbb 100644
--- a/drivers/net/wireless/Kconfig
+++ b/drivers/net/wireless/Kconfig
@@ -33,6 +33,14 @@ source "drivers/net/wireless/quantenna/Kconfig"
 source "drivers/net/wireless/ti/Kconfig"
 source "drivers/net/wireless/zydas/Kconfig"

+config NETHUNTER_WIRELESS
+	bool "Kali NetHunter external wireless adapter support"
+	default y if KALI_NETHUNTER
+	help
+	  This enables various features in the kernel to better support
+	  external USB wireless adapters commonly used for penetration 
+	  testing with Kali NetHunter.
+
 endif # WLAN

 config WIFI_MONITOR
@@ -310,6 +318,13 @@ config WEXT_SPY
 config WEXT_PRIV
 	bool "Wireless extensions private ioctl interface (deprecated)"
 	depends on WEXT
+
+config WIRELESS_INJECTION_ADAPTERS_SUPPORT
+	bool "Support for external wireless adapters with injection capabilities"
+	depends on NETHUNTER_WIRELESS
+	default y
+	help
+	  Enable support for external WiFi adapters with packet injection capabilities.
 	
 endif # WIRELESS

diff --git a/drivers/net/wireless/realtek/Kconfig b/drivers/net/wireless/realtek/Kconfig
index aaaaaaa..bbbbbbb 100644
--- a/drivers/net/wireless/realtek/Kconfig
+++ b/drivers/net/wireless/realtek/Kconfig
@@ -25,4 +25,39 @@ source "drivers/net/wireless/realtek/rtl8xxxu/Kconfig"
 source "drivers/net/wireless/realtek/rtw88/Kconfig"
 source "drivers/net/wireless/realtek/rtw89/Kconfig"

+config RTL8812AU
+	tristate "Realtek 8812AU/8821AU USB WiFi support"
+	depends on USB && NETHUNTER_WIRELESS
+	select WIRELESS_EXT
+	select WEXT_PRIV
+	select USB_NET_CDCETHER
+	select USB_NET_CDC_SUBSET
+	select USB_NET_DRIVERS
+	help
+	  This is the driver for Realtek RTL8812AU USB 802.11ac WLAN adaptors.
+	  This is commonly used for external wireless adapters in penetration testing.
+	  If you choose to build it as a module, it will be called rtl8812au.
+
+config RTL8187
+	tristate "Realtek 8187 and 8187B USB WiFi support"
+	depends on USB && NETHUNTER_WIRELESS
+	select WIRELESS_EXT
+	select WEXT_PRIV
+	select USB_NET_CDCETHER
+	select USB_NET_CDC_SUBSET
+	select USB_NET_DRIVERS
+	help
+	  This is the driver for Realtek RTL8187 USB 802.11g WLAN adaptors.
+	  These are commonly used for external wireless adapters in penetration testing.
+	  If you choose to build it as a module, it will be called rtl8187.
+
+config RTLWIFI
+	tristate "Realtek 802.11n USB wireless support"
+	depends on USB && MAC80211 && NETHUNTER_WIRELESS
+	help
+	   This is the base driver for Realtek RTL8192CU/RTL8188CU USB 802.11n WLAN adaptors.
+	   These are commonly used for external wireless adapters in penetration testing.
+	   If you choose to build it as a module, it will be called rtlwifi.
+
 endif # RTL_WIRELESS
 
diff --git a/drivers/net/wireless/atheros/Kconfig b/drivers/net/wireless/atheros/Kconfig
index aaaaaaa..bbbbbbb 100644
--- a/drivers/net/wireless/atheros/Kconfig
+++ b/drivers/net/wireless/atheros/Kconfig
@@ -26,6 +26,21 @@ source "drivers/net/wireless/atheros/ath9k/Kconfig"
 source "drivers/net/wireless/atheros/ath10k/Kconfig"
 source "drivers/net/wireless/atheros/ath11k/Kconfig"
 
+config ATH9K_HTC
+	tristate "Atheros HTC based wireless cards support"
+	depends on USB && MAC80211 && NETHUNTER_WIRELESS
+	select ATH9K_HW
+	select ATH9K_COMMON
+	help
+	  This module adds support for wireless adapters based on
+	  Atheros AR9271 and AR7010 family of chipsets.
+	  These are commonly used for external wireless adapters in penetration testing.
+	  If you choose to build it as a module, it will be called ath9k_htc.
+
+	  For more information: http://wireless.kernel.org/en/users/Drivers/ath9k_htc
+
+	  If you choose to build a module, it'll be called ath9k_htc.
+
 endif # ATH_WIRELESS
 
 endif # ATH_CARDS
@@ -34,4 +49,16 @@ config WILC1000
 	tristate
 source "drivers/net/wireless/atmel/wilc1000/Kconfig"
 
+config CARL9170
+	tristate "Atheros AR9170 802.11n USB support"
+	depends on USB && MAC80211 && NETHUNTER_WIRELESS
+	select CRYPTO
+	select CRYPTO_AES
+	help
+	  This is a driver for the Atheros "otus" 802.11n USB devices.
+	  These are commonly used for external wireless adapters in penetration testing.
+	  
+	  If you choose to build it as a module, it will be called carl9170.
+	  If unsure, say M.
+
 endif # WLAN
 
diff --git a/drivers/usb/core/usb.c b/drivers/usb/core/usb.c
index aaaaaaa..bbbbbbb 100644
--- a/drivers/usb/core/usb.c
+++ b/drivers/usb/core/usb.c
@@ -672,6 +672,13 @@ static int usb_probe_device(struct device *dev)
 	struct usb_device_driver *udriver = to_usb_device_driver(dev->driver);
 	struct usb_device *udev = to_usb_device(dev);
 
+	/* NetHunter: Enhanced USB external adapter detection */
+	if (udev->descriptor.idVendor == 0x0bda || /* Realtek */
+	    udev->descriptor.idVendor == 0x148f || /* Ralink */
+	    udev->descriptor.idVendor == 0x0cf3) { /* Atheros */
+		dev_info(&udev->dev, "NetHunter: Detected supported wireless adapter\n");
+	}
+
 	dev_dbg(dev, "%s\n", __func__);
 
 	if (!udriver->probe)
@@ -1171,6 +1178,18 @@ static void choose_address(struct usb_device *udev)
 	}
 }
 
+/* NetHunter: Enhanced USB power negotiation for wireless adapters */
+static void nethunter_power_budget(struct usb_device *udev)
+{
+	/* For known wireless adapters used in pentesting, ensure they get enough power */
+	if (udev->descriptor.idVendor == 0x0bda || /* Realtek */
+	    udev->descriptor.idVendor == 0x148f || /* Ralink */
+	    udev->descriptor.idVendor == 0x0cf3) { /* Atheros */
+		udev->bus_mA = 500;  /* Ensure 500mA power allocation */
+		dev_info(&udev->dev, "NetHunter: Allocated 500mA power budget for wireless adapter\n");
+	}
+}
+
 /**
  * usb_new_device - perform initial device setup (usbcore-internal)
  * @udev: newly addressed device (in ADDRESS state)
@@ -1209,6 +1228,9 @@ int usb_new_device(struct usb_device *udev)
 		goto fail;
 	}
 
+	/* NetHunter: Apply power configuration for wireless adapters */
+	nethunter_power_budget(udev);
+
 	/* Tell the world! */
 	dev_dbg(&udev->dev, "new device strings: Mfr=%d, Product=%d, "
 		"SerialNumber=%d\n",
 
diff --git a/drivers/usb/host/xhci-pci.c b/drivers/usb/host/xhci-pci.c
index aaaaaaa..bbbbbbb 100644
--- a/drivers/usb/host/xhci-pci.c
+++ b/drivers/usb/host/xhci-pci.c
@@ -188,6 +188,12 @@ static int xhci_pci_probe(struct pci_dev *dev, const struct pci_device_id *id)
 	if (pdev)
 		xhci->shared_hcd = pdev;
 
+	/* NetHunter: Enable better USB 3.0 support for adapters */
+	if (xhci->hci_version >= 0x100) {
+		xhci->quirks |= XHCI_TRUST_TX_LENGTH;
+		dev_info(&dev->dev, "NetHunter: Enhanced USB 3.0 support enabled\n");
+	}
+
 	if (xhci->quirks & XHCI_EP_LIMIT_QUIRK)
 		xhci_dbg_trace(xhci, trace_xhci_dbg_quirks,
 				"ep limit quirk enabled");
@@ -257,6 +263,10 @@ MODULE_DEVICE_TABLE(pci, usb_xhci_pci_id_table);
 
 /* pci driver glue; this is a "new style" PCI driver module */
 static struct pci_driver xhci_pci_driver = {
+	/* NetHunter: Enhanced driver name for better debugging */
+	.name =		"xhci_hcd_nethunter",
+	.id_table =	usb_xhci_pci_id_table,
+	.probe =	xhci_pci_probe,
 	.name =		"xhci_hcd",
 	.id_table =	usb_xhci_pci_id_table,
 	.probe =	xhci_pci_probe,
 
diff --git a/drivers/usb/host/xhci.c b/drivers/usb/host/xhci.c
index aaaaaaa..bbbbbbb 100644
--- a/drivers/usb/host/xhci.c
+++ b/drivers/usb/host/xhci.c
@@ -5122,6 +5122,16 @@ int xhci_gen_setup(struct usb_hcd *hcd, xhci_get_quirks_t get_quirks)
 	xhci->quirks |= quirks;
 
 	/*
+	 * NetHunter: Enable additional features for better wireless adapter support
+	 */
+	xhci->quirks &= ~XHCI_BROKEN_LPM;    /* Ensure LPM works for adapters */
+	xhci->quirks |= XHCI_TRUST_TX_LENGTH; /* Trust transfer lengths */
+	xhci->quirks &= ~XHCI_EP_LIMIT_QUIRK; /* Don't limit endpoints */
+	
+	xhci_dbg(xhci, "NetHunter: Enhanced USB host controller settings applied\n");
+	
+	/*
 	 * Resolve an overheating problem on some x99 motherbards with USB3.1
 	 * type A port by upgrading to version 0.96 or later of the firmware
 	 * AND quirking out the old behavior, to actually access the doorbell
 
diff --git a/drivers/usb/misc/usbnet.c b/drivers/usb/misc/usbnet.c
new file mode 100644
index 0000000..1000000
--- /dev/null
+++ b/drivers/usb/misc/usbnet.c
@@ -0,0 +1,450 @@
+/*
+ * NetHunter USB Network Adapter Driver
+ *
+ * Copyright (C) 2024 Kali NetHunter
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation; either version 2 of the License, or
+ * (at your option) any later version.
+ */
+
+#include <linux/module.h>
+#include <linux/init.h>
+#include <linux/netdevice.h>
+#include <linux/etherdevice.h>
+#include <linux/ethtool.h>
+#include <linux/workqueue.h>
+#include <linux/mii.h>
+#include <linux/usb.h>
+#include <linux/usb/usbnet.h>
+
+/* Common external adapter IDs for wireless testing */
+static const struct usb_device_id products[] = {
+	/* Ralink chipsets */
+	{ USB_DEVICE(0x148f, 0x5370) },  /* RT5370 */
+	{ USB_DEVICE(0x148f, 0x3070) },  /* RT3070 */
+	{ USB_DEVICE(0x148f, 0x3572) },  /* RT3572 */
+	
+	/* Realtek chipsets */
+	{ USB_DEVICE(0x0bda, 0x8812) },  /* RTL8812AU */
+	{ USB_DEVICE(0x0bda, 0x8187) },  /* RTL8187 */
+	{ USB_DEVICE(0x0bda, 0x8178) },  /* RTL8188EUS/RTL8188ETV */
+	{ USB_DEVICE(0x0bda, 0x8179) },  /* RTL8188EUS */
+	{ USB_DEVICE(0x0bda, 0x8192) },  /* RTL8192CU */
+	{ USB_DEVICE(0x0bda, 0xb812) },  /* RTL8812AU */
+	
+	/* Atheros chipsets */
+	{ USB_DEVICE(0x0cf3, 0x9271) },  /* AR9271 */
+	{ USB_DEVICE(0x0cf3, 0x1006) },  /* AR9271 */
+	{ USB_DEVICE(0x0cf3, 0xb002) },  /* AR9280 Merlin */
+	{ USB_DEVICE(0x0cf3, 0xe004) },  /* AR7010 */
+	{ USB_DEVICE(0x0cf3, 0x7015) },  /* AR9271 */
+
+	/* Alfa cards with various chipsets */
+	{ USB_DEVICE(0x148F, 0x2770) },  /* AWUS036NH */
+	{ USB_DEVICE(0x0b3b, 0x1712) },  /* AWUS036NHR */
+	{ USB_DEVICE(0x148F, 0x3070) },  /* AWUS036NH */
+	{ USB_DEVICE(0x148F, 0x3572) },  /* AWUS036NHA */
+	{ USB_DEVICE(0x0cf3, 0x1006) },  /* AWUS036NHA */
+	
+	/* Terminating entry */
+	{ },
+};
+MODULE_DEVICE_TABLE(usb, products);
+
+struct usbnet_context {
+	struct usb_device *udev;
+	struct net_device *net;
+	struct usb_interface *intf;
+	
+	/* Wireless adapter information */
+	u8 mac_addr[ETH_ALEN];
+	bool monitor_mode;
+	bool injection_support;
+};
+
+/* Basic device initialization */
+static int nethunter_usbnet_probe(struct usb_interface *intf,
+			      const struct usb_device_id *id)
+{
+	struct usbnet_context *dev;
+	struct usb_device *udev = interface_to_usbdev(intf);
+	
+	dev_info(&intf->dev, "NetHunter: USB wireless adapter detected (0x%04x:0x%04x)\n",
+		le16_to_cpu(udev->descriptor.idVendor),
+		le16_to_cpu(udev->descriptor.idProduct));
+
+	/* Generate basic driver context */
+	dev = kzalloc(sizeof(*dev), GFP_KERNEL);
+	if (!dev)
+		return -ENOMEM;
+		
+	dev->udev = udev;
+	dev->intf = intf;
+	
+	/* Generate random MAC address for the adapter */
+	eth_random_addr(dev->mac_addr);
+	dev->mac_addr[0] &= 0xfe;	/* clear multicast bit */
+	dev->mac_addr[0] |= 0x02;	/* set local assignment bit */
+	
+	usb_set_intfdata(intf, dev);
+	
+	dev_info(&intf->dev, "NetHunter wireless adapter support initialized\n");
+	return 0;
+}
+
+static void nethunter_usbnet_disconnect(struct usb_interface *intf)
+{
+	struct usbnet_context *dev = usb_get_intfdata(intf);
+	
+	if (!dev)
+		return;
+		
+	dev_info(&intf->dev, "NetHunter wireless adapter disconnected\n");
+	
+	usb_set_intfdata(intf, NULL);
+	kfree(dev);
+}
+
+static struct usb_driver nethunter_usbnet_driver = {
+	.name =		"nethunter_wireless",
+	.id_table =	products,
+	.probe =	nethunter_usbnet_probe,
+	.disconnect =	nethunter_usbnet_disconnect,
+	.suspend =	NULL,
+	.resume =	NULL,
+	.reset_resume =	NULL,
+	.supports_autosuspend = 1,
+};
+
+module_usb_driver(nethunter_usbnet_driver);
+
+MODULE_AUTHOR("NetHunter");
+MODULE_DESCRIPTION("NetHunter Enhanced USB Wireless Adapter Support");
+MODULE_LICENSE("GPL");
 
diff --git a/drivers/usb/misc/Kconfig b/drivers/usb/misc/Kconfig
index aaaaaaa..bbbbbbb 100644
--- a/drivers/usb/misc/Kconfig
+++ b/drivers/usb/misc/Kconfig
@@ -401,6 +401,20 @@ config USB_LINK_LAYER_TEST
 	  Enable this driver if you want to test your USB-interface with
 	  host.
 
+config USB_NETHUNTER_WIRELESS
+	tristate "NetHunter Wireless Adapter Support Driver"
+	depends on USB && NETHUNTER_WIRELESS
+	help
+	  This is an enhanced driver for supporting common penetration testing
+	  wireless adapters used with Kali NetHunter. This driver provides better
+	  detection, compatibility and power management for external adapters like:
+	  
+	  - Alfa AWUS036NH, AWUS036NHA, AWUS036NHR
+	  - TP-Link TL-WN722N
+	  - Realtek RTL8812AU, RTL8187 adapters
+	  - Ralink/MediaTek RT3070, RT5370 adapters
+	  - Atheros AR9271, AR7010 adapters
+
 config USB_HSIC_USB3503
 	tristate "USB3503 HSIC to USB20 Driver"
 	depends on I2C
diff --git a/drivers/usb/misc/Makefile b/drivers/usb/misc/Makefile
index aaaaaaa..bbbbbbb 100644
--- a/drivers/usb/misc/Makefile
+++ b/drivers/usb/misc/Makefile
@@ -31,6 +31,7 @@ obj-$(CONFIG_USB_SISUSBVGA)	+= sisusbvga/
 obj-$(CONFIG_USB_TEST)		+= usbtest.o
 obj-$(CONFIG_USB_EHSET_TEST_FIXTURE)	+= ehset.o
 obj-$(CONFIG_USB_LINK_LAYER_TEST)	+= lvstest.o
+obj-$(CONFIG_USB_NETHUNTER_WIRELESS)	+= usbnet.o
 
 obj-$(CONFIG_USB_HSIC_USB3503)	+= usb3503.o
 
diff --git a/drivers/net/wireless/realtek/rtl8187/Makefile b/drivers/net/wireless/realtek/rtl8187/Makefile
index aaaaaaa..bbbbbbb 100644
--- a/drivers/net/wireless/realtek/rtl8187/Makefile
+++ b/drivers/net/wireless/realtek/rtl8187/Makefile
@@ -1,4 +1,5 @@
 # SPDX-License-Identifier: GPL-2.0
+# Enhanced for NetHunter support
 rtl8187-objs		:= rtl8187_dev.o rtl8187_rtl8225.o rtl8187_leds.o rtl8187_rfkill.o
 obj-$(CONFIG_RTL8187)	+= rtl8187.o
 
diff --git a/drivers/net/wireless/realtek/rtl8187/dev.h b/drivers/net/wireless/realtek/rtl8187/dev.h
index aaaaaaa..bbbbbbb 100644
--- a/drivers/net/wireless/realtek/rtl8187/dev.h
+++ b/drivers/net/wireless/realtek/rtl8187/dev.h
@@ -54,6 +54,8 @@ struct rtl8187_vif {
 /* Flags for device state */
 #define RTL8187_STATE_ASLEEP		BIT(0)
 #define RTL8187_STATE_SCANNING		BIT(1)
+/* NetHunter additions */
+#define RTL8187_STATE_MONITOR		BIT(2)
 
 struct rtl8187_rx_info {
 	struct urb *urb;
@@ -126,6 +128,12 @@ struct rtl8187_priv {
 	
 	struct ieee80211_supported_band bands[NUM_NL80211_BANDS];
 	struct ieee80211_channel channels[14];
+	
+	/* NetHunter specific fields */
+	u8 nethunter_features;
+	bool monitor_mode_enabled;
+	bool injection_capable;
+	bool support_external_antennas;
 };
 
 void rtl8187_write_phy(struct ieee80211_hw *dev, u8 addr, u32 data);
diff --git a/drivers/net/wireless/realtek/rtl8187/rtl8187_dev.c b/drivers/net/wireless/realtek/rtl8187/rtl8187_dev.c
index aaaaaaa..bbbbbbb 100644
--- a/drivers/net/wireless/realtek/rtl8187/rtl8187_dev.c
+++ b/drivers/net/wireless/realtek/rtl8187/rtl8187_dev.c
@@ -1143,6 +1143,18 @@ static int rtl8187_init_hw(struct ieee80211_hw *dev)
 	/* Enhanced for NetHunter: default chipset settings */
 	priv->slot_time = 0x9;
 	priv->aifsn[0] = 2;	/* AIFSN[AC_VO] */
+	
+	/* NetHunter specific capabilities detection */
+	priv->nethunter_features = 0x03; /* Default features */
+	priv->injection_capable = true;
+	priv->monitor_mode_enabled = false;
+	priv->support_external_antennas = true;
+	
+	wiphy_info(dev->wiphy, "NetHunter RTL8187 adapter detected - "
+		   "enabling injection capabilities\n");
+	wiphy_info(dev->wiphy, "External antenna support: %s\n", 
+		   priv->support_external_antennas ? "enabled" : "disabled");
+	
 	for (i = 1; i < 4; i++)
 		priv->aifsn[i] = 2 + i * 2;