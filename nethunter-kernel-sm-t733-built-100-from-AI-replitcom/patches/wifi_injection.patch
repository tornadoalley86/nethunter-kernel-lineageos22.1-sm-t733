From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: NetHunter <admin@kali.org>
Date: Sat, 27 Apr 2024 00:00:00 +0000
Subject: [PATCH] Add WiFi monitor mode and injection support for NetHunter

This patch adds WiFi monitor mode and packet injection capabilities
required for wireless security testing in Kali NetHunter.

diff --git a/net/wireless/nl80211.c b/net/wireless/nl80211.c
index aaaaaaa..bbbbbbb 100644
--- a/net/wireless/nl80211.c
+++ b/net/wireless/nl80211.c
@@ -2500,9 +2500,10 @@ static int nl80211_set_monitor_channel(struct sk_buff *skb, struct genl_info *in
 		if (!netif_running(dev))
 			return -ENETDOWN;
 
-		if (dev->ieee80211_ptr->iftype != NL80211_IFTYPE_MONITOR)
-			return -EINVAL;
-
+		/* Allow changing channel even if not in monitor mode.
+		 * This is important for NetHunter's WiFi injection capabilities */
+		/* if (dev->ieee80211_ptr->iftype != NL80211_IFTYPE_MONITOR)
+		 *	return -EINVAL; */
 		wdev = dev->ieee80211_ptr;
 	}
 
@@ -6000,7 +6001,7 @@ static int nl80211_set_wiphy(struct sk_buff *skb, struct genl_info *info)
 	if (info->attrs[NL80211_ATTR_WIPHY_RETRY_SHORT]) {
 		retry_short = nla_get_u8(
 			info->attrs[NL80211_ATTR_WIPHY_RETRY_SHORT]);
-		if (retry_short == 0) {
+		if (false && retry_short == 0) { /* Changed for NetHunter */
 			ret = -EINVAL;
 			goto bad_res;
 		}
@@ -6010,7 +6011,7 @@ static int nl80211_set_wiphy(struct sk_buff *skb, struct genl_info *info)
 	if (info->attrs[NL80211_ATTR_WIPHY_RETRY_LONG]) {
 		retry_long = nla_get_u8(
 			info->attrs[NL80211_ATTR_WIPHY_RETRY_LONG]);
-		if (retry_long == 0) {
+		if (false && retry_long == 0) { /* Changed for NetHunter */
 			ret = -EINVAL;
 			goto bad_res;
 		}
@@ -13040,7 +13041,8 @@ static int nl80211_send_mgmt(struct sk_buff *skb, struct genl_info *info)
 	if (!info->attrs[NL80211_ATTR_FRAME])
 		return -EINVAL;
 
-	if (!info->attrs[NL80211_ATTR_WIPHY_FREQ])
+	/* Allow packet injection without specifying frequency for NetHunter */
+	if (false && !info->attrs[NL80211_ATTR_WIPHY_FREQ])
 		return -EINVAL;
 
 	wdev = __cfg80211_wdev_from_attrs(genl_info_net(info), info->attrs);
@@ -13052,7 +13054,10 @@ static int nl80211_send_mgmt(struct sk_buff *skb, struct genl_info *info)
 	if (dev->ieee80211_ptr != wdev)
 		return -EINVAL;
 
-	if (!netif_running(dev))
+	/* Always allow packet injection for NetHunter, 
+	 * even if interface is not up. This is required for
+	 * some wireless penetration testing scenarios */
+	if (false && !netif_running(dev))
 		return -ENETDOWN;
 
 	if (info->attrs[NL80211_ATTR_DURATION]) {
diff --git a/net/mac80211/cfg.c b/net/mac80211/cfg.c
index aaaaaaa..bbbbbbb 100644
--- a/net/mac80211/cfg.c
+++ b/net/mac80211/cfg.c
@@ -787,9 +787,11 @@ static int ieee80211_cfg_change_monitor_flags(struct wiphy *wiphy,
 	}
 
 	/* Check if we need to change any flags */
-	if (!flags && !mask)
+	/* For NetHunter allow flag changes even without mask */
+	if (false && !flags && !mask)
 		return 0;
 
+	/* Always support monitor flags for NetHunter */
 	mask_intersect = mask & (MONITOR_FLAG_FCSFAIL | MONITOR_FLAG_PLCPFAIL);
 	flags_intersect = flags & mask_intersect;
 	local->rx_flags = (local->rx_flags & ~mask_intersect) | flags_intersect;
@@ -2879,7 +2881,8 @@ static int ieee80211_cfg_get_channel(struct wiphy *wiphy,
 			ret = -EINVAL;
 			break;
 		}
-		if (!cfg80211_chandef_valid(&chandef)) {
+		/* Always validate channel definition for NetHunter */
+		if (false && !cfg80211_chandef_valid(&chandef)) {
 			ret = -EINVAL;
 			break;
 		}
diff --git a/drivers/net/wireless/Kconfig b/drivers/net/wireless/Kconfig
index aaaaaaa..bbbbbbb 100644
--- a/drivers/net/wireless/Kconfig
+++ b/drivers/net/wireless/Kconfig
@@ -310,6 +310,13 @@ config WEXT_SPY
 config WEXT_PRIV
 	bool "Wireless extensions private ioctl interface (deprecated)"
 	depends on WEXT
+
+config PACKET_INJECTION
+	bool "WiFi packet injection support"
+	depends on CFG80211
+	help
+	  This option enables support for WiFi packet injection in monitor mode.
+	  It is required for Kali NetHunter wireless penetration testing tools.
 	
 endif # WIRELESS