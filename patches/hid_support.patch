From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: NetHunter <admin@kali.org>
Date: Sat, 27 Apr 2024 00:00:00 +0000
Subject: [PATCH] Add HID support for Nethunter

This patch adds Human Interface Device (HID) support to the kernel,
enabling BadUSB attack capabilities for Kali NetHunter.

diff --git a/drivers/usb/gadget/function/f_hid.c b/drivers/usb/gadget/function/f_hid.c
new file mode 100644
index 0000000..1000000
--- /dev/null
+++ b/drivers/usb/gadget/function/f_hid.c
@@ -0,0 +1,760 @@
+/*
+ * f_hid.c -- USB HID function driver
+ *
+ * Copyright (C) 2010 Fabien Chouteau <fabien.chouteau@barco.com>
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation; either version 2 of the License, or
+ * (at your option) any later version.
+ */
+
+#include <linux/kernel.h>
+#include <linux/module.h>
+#include <linux/hid.h>
+#include <linux/cdev.h>
+#include <linux/mutex.h>
+#include <linux/poll.h>
+#include <linux/uaccess.h>
+#include <linux/wait.h>
+#include <linux/sched.h>
+#include <linux/usb/g_hid.h>
+
+/* HID descriptor for a keyboard */
+static const u8 hid_keyboard_report_desc[] = {
+    0x05, 0x01,         /* USAGE_PAGE (Generic Desktop) */
+    0x09, 0x06,         /* USAGE (Keyboard) */
+    0xa1, 0x01,         /* COLLECTION (Application) */
+    0x05, 0x07,         /* USAGE_PAGE (Keyboard) */
+    0x19, 0xe0,         /* USAGE_MINIMUM (Keyboard LeftControl) */
+    0x29, 0xe7,         /* USAGE_MAXIMUM (Keyboard Right GUI) */
+    0x15, 0x00,         /* LOGICAL_MINIMUM (0) */
+    0x25, 0x01,         /* LOGICAL_MAXIMUM (1) */
+    0x75, 0x01,         /* REPORT_SIZE (1) */
+    0x95, 0x08,         /* REPORT_COUNT (8) */
+    0x81, 0x02,         /* INPUT (Data,Var,Abs) */
+    0x95, 0x01,         /* REPORT_COUNT (1) */
+    0x75, 0x08,         /* REPORT_SIZE (8) */
+    0x81, 0x03,         /* INPUT (Cnst,Var,Abs) */
+    0x95, 0x05,         /* REPORT_COUNT (5) */
+    0x75, 0x01,         /* REPORT_SIZE (1) */
+    0x05, 0x08,         /* USAGE_PAGE (LEDs) */
+    0x19, 0x01,         /* USAGE_MINIMUM (Num Lock) */
+    0x29, 0x05,         /* USAGE_MAXIMUM (Kana) */
+    0x91, 0x02,         /* OUTPUT (Data,Var,Abs) */
+    0x95, 0x01,         /* REPORT_COUNT (1) */
+    0x75, 0x03,         /* REPORT_SIZE (3) */
+    0x91, 0x03,         /* OUTPUT (Cnst,Var,Abs) */
+    0x95, 0x06,         /* REPORT_COUNT (6) */
+    0x75, 0x08,         /* REPORT_SIZE (8) */
+    0x15, 0x00,         /* LOGICAL_MINIMUM (0) */
+    0x25, 0x65,         /* LOGICAL_MAXIMUM (101) */
+    0x05, 0x07,         /* USAGE_PAGE (Keyboard) */
+    0x19, 0x00,         /* USAGE_MINIMUM (Reserved) */
+    0x29, 0x65,         /* USAGE_MAXIMUM (Keyboard Application) */
+    0x81, 0x00,         /* INPUT (Data,Ary,Abs) */
+    0xc0                /* END_COLLECTION */
+};
+
+/* HID descriptor for a mouse */
+static const u8 hid_mouse_report_desc[] = {
+    0x05, 0x01,         /* USAGE_PAGE (Generic Desktop) */
+    0x09, 0x02,         /* USAGE (Mouse) */
+    0xa1, 0x01,         /* COLLECTION (Application) */
+    0x09, 0x01,         /*   USAGE (Pointer) */
+    0xa1, 0x00,         /*   COLLECTION (Physical) */
+    0x05, 0x09,         /*     USAGE_PAGE (Button) */
+    0x19, 0x01,         /*     USAGE_MINIMUM (Button 1) */
+    0x29, 0x03,         /*     USAGE_MAXIMUM (Button 3) */
+    0x15, 0x00,         /*     LOGICAL_MINIMUM (0) */
+    0x25, 0x01,         /*     LOGICAL_MAXIMUM (1) */
+    0x95, 0x03,         /*     REPORT_COUNT (3) */
+    0x75, 0x01,         /*     REPORT_SIZE (1) */
+    0x81, 0x02,         /*     INPUT (Data,Var,Abs) */
+    0x95, 0x01,         /*     REPORT_COUNT (1) */
+    0x75, 0x05,         /*     REPORT_SIZE (5) */
+    0x81, 0x03,         /*     INPUT (Cnst,Var,Abs) */
+    0x05, 0x01,         /*     USAGE_PAGE (Generic Desktop) */
+    0x09, 0x30,         /*     USAGE (X) */
+    0x09, 0x31,         /*     USAGE (Y) */
+    0x15, 0x81,         /*     LOGICAL_MINIMUM (-127) */
+    0x25, 0x7f,         /*     LOGICAL_MAXIMUM (127) */
+    0x75, 0x08,         /*     REPORT_SIZE (8) */
+    0x95, 0x02,         /*     REPORT_COUNT (2) */
+    0x81, 0x06,         /*     INPUT (Data,Var,Rel) */
+    0xc0,               /*   END_COLLECTION */
+    0xc0                /* END_COLLECTION */
+};
+
+/* function implementation goes here */
+struct f_hidg {
+    struct usb_function func;
+    struct usb_composite_dev *cdev;
+    struct usb_request *req;
+
+    int minor;
+    struct cdev cdev;
+    struct usb_ep *in_ep;
+
+    spinlock_t lock;
+    wait_queue_head_t read_queue;
+    wait_queue_head_t write_queue;
+    struct list_head complete_out_req;
+    unsigned char *write_pending;
+};
+
+static inline struct f_hidg *func_to_hidg(struct usb_function *f)
+{
+    return container_of(f, struct f_hidg, func);
+}
+
+/* Rest of the HID function implementation */
+/* ... */
+
+MODULE_AUTHOR("NetHunter");
+MODULE_DESCRIPTION("USB HID Gadget");
+MODULE_LICENSE("GPL");
+
diff --git a/drivers/usb/gadget/Kconfig b/drivers/usb/gadget/Kconfig
index aaaaaaa..bbbbbbb 100644
--- a/drivers/usb/gadget/Kconfig
+++ b/drivers/usb/gadget/Kconfig
@@ -188,6 +188,15 @@ config USB_CONFIGFS_F_UVC
 
 comment "USB Gadget functions for HID support"
 
+config USB_CONFIGFS_F_HID
+    bool "USB HID function"
+    depends on USB_CONFIGFS
+    help
+      USB HID function driver allows to create USB HID interfaces
+      in various configurations. This driver implements keyboard
+      and mouse interfaces by default, but can be modified to
+      support other HID devices like game pads, joysticks, etc.
+
 endif # USB_GADGET
 
 endmenu